<?php
/**
 * Created by PhpStorm.
 * User: Рустам
 * Date: 27.02.2017
 * Time: 22:55
 */

namespace Users\Form\Fieldset;


use Application\Form\Fieldset\InputFilterFieldset;
use Zend\InputFilter\InputFilterProviderInterface;
use Zend\Stdlib\InitializableInterface;

class UsersFieldset extends InputFilterFieldset implements
    InitializableInterface,
    InputFilterProviderInterface
{
    protected $inputFilterSpecification = array(
        'steamid' => array(
            'required' => true,
        ),
        'password' => array(
            //'required' => false,
        ),
        'profileurl' => array(
            'required' => true,
        ),
        'personaname' => array(
            'required' => true,
        ),
        'realname' => array(
            'required' => false,
        ),
        'registrationDate' => array(
            'required' => false,
        ),
        'userpic' => array(
            'required' => false,
        ),
    );

    public function init()
    {
        $this->add(array(
            'name' => 'steamid',
            'type' => 'text'
        ));

        $this->add(array(
            'name' => 'password',
            'type' => 'text'
        ));

        $this->add(array(
            'name' => 'profileurl',
            'type' => 'text'
        ));

        $this->add(array(
            'name' => 'personaname',
            'type' => 'text'
        ));

        $this->add(array(
            'name' => 'realname',
            'type' => 'text'
        ));

        $this->add(array(
            'name' => 'registrationDate',
            'type' => 'text'
        ));

        $this->add(array(
            'name' => 'userpic',
            'type' => 'text'
        ));
    }

    public function getInputFilterSpecification()
    {
        return $this->inputFilterSpecification;
    }

    /**
     * @param mixed $inputFilterSpecification
     */
    public function setInputFilterSpecification(array $inputFilterSpecification)
    {
        $this->inputFilterSpecification = $inputFilterSpecification;
    }

    public function bindValues(array $values = array())
    {
        foreach ($values as $key => $value) {
            if (is_null($value) === true) {
                unset($values[$key]);
            }
        }

        return parent::bindValues($values); // TODO: Change the autogenerated stub
    }

    public function getHydrator()
    {
        return parent::getHydrator(); // TODO: Change the autogenerated stub
    }

}